<?php

/**
 * Implements hook_init().
 */


/**
 * Implements hook_perm().
 */

function pg_simplepay_perm() {
  return array('administer pgapi', 'free access','buy access');
}


/**
 * Implements hook_link().
 */

function pg_simplepay_link($type, $object, $teaser = FALSE) {
  $links = array();
  if (!user_access('free access')&& variable_get('pg_simplepay_allowed_'. $object->type, 0) && $object->pg_simplepay_price > 0 && !pg_simplepay_is_paid($object->nid)) {
    $links['sample_link'] = array(
      'title' => t('Buy access'),
      'href' => 'simplepay/'.$object->nid,
      'attributes' => array('title' => t('Buy access')),
    );
  }

  return $links;
}

/**
 * Implements hook_field_formatter_info().
 */
function pg_simplepay_field_formatter_info() {

  $types = field_info_field_types();
  $res_types = array();
  foreach($types as $type => $info){
    $res_types[] = $type;
  }
  
  return array(
    'pg_simplepay_access' => array(
      'label' => t('Payment required'),
      'field types' => $res_types,
      'settings' =>  array(
        'formatter' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function pg_simplepay_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  foreach (module_implements('field_formatter_info') as $module) {
    $formatter_types = (array) module_invoke($module, 'field_formatter_info');
    foreach ($formatter_types as $name => $formatter_info) {
      $options[$name.":".$module] = $formatter_info['label'];
    }
  }
  
  $element['formatter'] = array(
    '#type' => 'select',
    '#title' => t('Formater'),
    '#options' => $options,
    '#default_value' => $settings['formatter'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function pg_simplepay_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  $summary[] = t('Display like !formatter', array('!formatter' => $settings['formatter']));

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function pg_simplepay_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  foreach ($items as $delta => $item) {
    list($formatter,$module) = explode(":", $settings['formatter']);
    $function = $module."_field_formatter_view";
    $s_items = array();
    $s_items[0] = $item;
    $s_display['type'] = $formatter;
//    $data = $function($entity_type, $entity, $field, $instance, $langcode, $s_items, $s_display);
    
//    $element[$delta] = $data[0];
  }

  return $element;
}

/**
 * Implements hook_node_load().
 */
function pg_simplepay_node_load($nodes, $types) {
  global $user;
  foreach($nodes as $nid => $node){
    if($node->type == 'pg_simplepay'){
//      $result = db_query("SELECT * FROM {pg_simplepay_price}
//                          WHERE nid = :nid AND vid = :vid", array(':nid' => $node->nid, ':vid' => $node->vid))->fetchObject();

      $nodes[$nid]->pg_simplepay['price'] = $result->price ? $result->price : 0;
      $nodes[$nid]->pg_simplepay['free'] = $result->free ? $result->free : 0;
    }  
  }
}

/**
 * Implements hook_node_view().
 */
function pg_simplepay_node_view($node, $view_mode = 'full') {
  global $user;
//  drupal_set_message('<pre>'.print_r($node,true).'</pre>');

  if($node->type == 'pg_simplepay' && !user_access('free access')){
      
    if($view_mode == 'full'){
      
    } 
    /*
              if (!user_access('free access') && variable_get('pg_simplepay_allowed_'. $node->type, 0) && $node->pg_simplepay_price > 0) {
          if($a4==1){//view
            if(!pg_simplepay_is_paid($node->nid)){
	            $node2=node_build_content(node_load($node->nid), 'TRUE');
	            $node->content['body']['#value']=$node2->teaser;
	            if(!empty($node->content['files']['#value'])){
	              $node->content['files']['#value']=t('Please buy access to see attached files');
	            }
            }
          }
        }

    */
  } 
}

/**
 * Implemens of hook_form_alter().
 */
function pg_simplepay_form_alter(&$form, &$form_state, $form_id) {
  switch($form_id) {
    case 'pg_simplepay_node_form':
      //get all servers
      
      $form['pg_simplepay'] = array(
        '#type' => 'fieldset',
        '#title' => t('Simplepay settings'),
        '#collapsible' => TRUE,
        '#tree' => TRUE,
        '#group' => 'additional_settings',
      );
      $form['pg_simplepay']['price'] = array(
        '#type' => 'textfield',
        '#title' => t('Price'),
        '#default_value' => isset($form['#node']->pg_simplepay['price']) ? $form['#node']->pg_simplepay['price'] : 0,
      );
      $form['pg_simplepay']['free'] = array(
        '#type' => 'checkbox',
        '#title' => t('Free access'),
        '#description' => t('Check it if you want to make it free.'),
        '#default_value' => isset($form['#node']->pg_simplepay['free']) ? $form['#node']->pg_simplepay['free'] : 0,
      );
      $form['pg_simplepay']['fields'] = array(
        '#type' => 'fieldset',
        '#title' => t('Paid fields'),
        '#collapsible' => TRUE,
        '#tree' => TRUE,
        '#group' => 'additional_settings',
      );
        drupal_set_message('<pre>'.print_r(field_info_instances('pg_simplepay', 'pg_simplepay'),true).'</pre>');
        //$instances = field_info_instances($entity_type, $bundle);
      $options = array (
        'body' => t('body')
      );
//      $bundle = field_extract_bundle('pg_simplepay', $bundle);

      break;
  }
}


/**
 * Implements hook_menu()
 */

function pg_simplepay_menu() {
  $items['admin/pgdata/simplepay'] = array(
      'title'            => 'Simple Pay Settings',
      'description'      => 'Configure default settings for Simple Pay.',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('pg_simplepay_common'),
      'access callback'  => 'user_access',
      'access arguments' => array('administer pgapi'),
      'file'             => 'pg_simplepay.admin.inc',
      'type'             => MENU_NORMAL_ITEM,
  );

  $items['simplepay/%node'] = array(
      'title'            => 'Simple Pay',
      'page callback'    => 'pg_simplepay_prepay',
      'page arguments'   => array(1),
      'access callback'  => 'user_access',
      'access arguments' => array('buy access'),
      'file'             => 'pg_simplepay.admin.inc',
  );

  return $items;
}


/*
 * Implements hook_pgapi_transaction
 */
 
function pg_simplepay_pgapi_transaction($op,&$t){
  switch($op){
    case PG_COMPLETED:
        $simple_access['nid']     = $t->extra['nid'];
        $simple_access['uid']     = $t->uid;
        $simple_access['txnid']   = $t->txnid;
        $simple_access['created'] = time();
        if($t->uid == 0 ){
          $simple_access['session'] = $t->extra['session'];
        }
        drupal_write_record('pg_simplepay_payment', $simple_access);
        $t->workflow = pgapi_get_workflow_id('completed');
      break;
    case PG_DENIED:
        $t->workflow = pgapi_get_workflow_id('security violation');
      break;
    case PG_FAILED:
        $t->workflow = pgapi_get_workflow_id('canceled');
      break;
  }
  return $t;
}

/********************************************************************
 * Callback functions
 ********************************************************************/
 
function pg_simplepay_prepay ($node){
  global $user;
  $t = (object)(NULL);
  $t->amount = $node->pg_simplepay_price;
  $t->service = 'pg_simplepay';
  $t->uid = $user->uid;
  $t->title=t('You have been ordered !title ', array('!title' => l($node->title, 'node/'.$node->nid.'', array('html'=>true))));

  $ses=$_COOKIE[session_name()];

  $t->extra=array(
    'nid' => $node->nid,
    'session' => $ses,
  );
  $t = pgapi_transaction_save($t);
  $payment_url=  url('payment/'. $t->txnid, array('absolute' => TRUE));
  drupal_goto($payment_url);
  return '';
}

/*
 * Is Paid access by user
 */
 
function pg_simplepay_is_paid($nid, $account=null){
  global $user;
  if (!$account){
    $account = $user;
  }
  $ret = FALSE;
  if($account->uid == 0){
    $ses=$_COOKIE[session_name()];
	  $pr = db_fetch_object(db_query("SELECT * FROM {pg_simplepay_payment} WHERE nid = '%d' AND session = '%s' AND uid = '%d'", $nid, $ses, $account->uid));
	  if(!empty($pr)){
	    $ret = TRUE;
	  };

  }else{
	  $pr = db_fetch_object(db_query("SELECT * FROM {pg_simplepay_payment} WHERE nid = '%d' AND uid = '%d'", $nid, $account->uid));
	  if(!empty($pr)){
	    $ret = TRUE;
	  };
  }
  return $ret;
}
