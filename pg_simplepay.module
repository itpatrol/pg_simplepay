<?php

/**
 * Implements hook_permission().
 */
function pg_simplepay_permission() {
  // Add permission to admin pgapi.
  return array(
    'free access' => array(
      'title' => t('Full access'),
      'description' => t('Allows to access fields with no payment'),
      'restrict access' => TRUE,
    ),
    'buy access' => array(
      'title' => t('Buy access'),
      'description' => t('Allows to buy access'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function pg_simplepay_field_formatter_info() {

  $types = field_info_field_types();
  $res_types = array();
  foreach($types as $type => $info){
    $res_types[] = $type;
  }
  
  return array(
    'pg_simplepay_access' => array(
      'label' => t('Payment required'),
      'field types' => $res_types,
      'settings' =>  array(
        'formatter' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function pg_simplepay_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  foreach (module_implements('field_formatter_info') as $module) {
    $formatter_types = (array) module_invoke($module, 'field_formatter_info');
    foreach ($formatter_types as $name => $formatter_info) {
      $options[$name.":".$module] = $formatter_info['label'];
    }
  }
  
  $element['formatter'] = array(
    '#type' => 'select',
    '#title' => t('Formater'),
    '#options' => $options,
    '#default_value' => $settings['formatter'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function pg_simplepay_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  $summary[] = t('Display like !formatter', array('!formatter' => $settings['formatter']));

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function pg_simplepay_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  foreach ($items as $delta => $item) {
    list($formatter,$module) = explode(":", $settings['formatter']);
    $function = $module."_field_formatter_view";
    $s_items = array();
    $s_items[0] = $item;
    $s_display['type'] = $formatter;

    if (pg_simplepay_is_paid($entity) or user_access('free access') or $entity->pg_simplepay_free['und'][0]['value'] == 0) {

      $data = $function($entity_type, $entity, $field, $instance, $langcode, $s_items, $s_display);
      $element[$delta] = $data[0];
    }

  }

  return $element;
}

/**
 * Implements hook_node_view().
 */
function pg_simplepay_node_view($node, $view_mode = 'full') {
  global $user;
  if($node->type == 'pg_simplepay' && !user_access('free access') && !pg_simplepay_is_paid($node) && $node->pg_simplepay_free['und'][0]['value']){
    $node->content['links']['pg_simplepay'] = array(
      '#theme' => 'links__node__statistics',
      '#links' => array(
                  'pg_simplepay' => array(
                    'title' => t('Buy access'),
                    'href' => 'simplepay/'.$node->nid,
                    )
                  ),
      '#attributes' => array('class' => array('links', 'inline')),
      
    );
  }
}

/**
 * Implements hook_menu()
 */
function pg_simplepay_menu() {
  $items['simplepay/%node'] = array(
      'title'            => 'Simple Pay',
      'page callback'    => 'pg_simplepay_prepay',
      'page arguments'   => array(1),
      'access callback'  => 'user_access',
      'access arguments' => array('buy access'),
  );

  return $items;
}

/*
 * Implements hook_pgapi_payment_details
 */
function pg_simplepay_pgapi_payment_details($transaction){
  $node = node_load($transaction->extra['nid']);
  $uri = entity_uri('node', $node);
  return array(
    t('Link') => l($node->title,$uri['path'], $uri['options']),
  );
}
 
/*
 * Implements hook_pgapi_transaction
 */
 
function pg_simplepay_pgapi_transaction($op,$t){
  switch($op){
    case PG_COMPLETED:
      $simple_access['nid']     = $t->extra['nid'];
      $simple_access['uid']     = $t->uid;
      $simple_access['txnid']   = $t->txnid;
      $simple_access['created'] = time();
      if($t->uid == 0 ){
        $simple_access['session'] = $t->extra['session'];
      }
      drupal_write_record('pg_simplepay_payment', $simple_access);
      $t->workflow = pgapi_get_workflow_id('completed');
      break;

    case PG_DENIED:
      $t->workflow = pgapi_get_workflow_id('security violation');
      break;

    case PG_FAILED:
      $t->workflow = pgapi_get_workflow_id('canceled');
      break;
  }
}

function pg_simplepay_prepay ($node){
  global $user;
  
  //create transactions
  $transaction = new stdClass();
  
  $transaction->amount = $node->pg_simplepay_price['und'][0]['value'];
  $transaction->service = 'pg_simplepay';
  $transaction->uid = $user->uid;
  

  $transaction->title=t('Access to !title ', array('!title' => l($node->title, 'node/'.$node->nid.'', array('html'=>true))));

  $session_value = $_COOKIE[session_name()];

  $transaction->extra = array(
    'nid' => $node->nid,
    'session' => $session_value,
  );
  pgapi_transaction_save($transaction);
  $payment_url = url('payment/'. $transaction->txnid, array('absolute' => TRUE));
  drupal_goto($payment_url);
  return '';
}

/*
 * Is Paid access by user
 */
function pg_simplepay_is_paid($node, $account=null){
  global $user;

  if (!$account) {
    $account = $user;
  }
  
  $ret = FALSE;
  if ($account->uid == 0){
    $session_value = $_COOKIE[session_name()];
	  $pr = db_query("SELECT * FROM {pg_simplepay_payment} WHERE nid = :nid AND session = :session AND uid = :uid", array( ':nid' => $node->nid, ':session' => $session_value, ':uid' => $account->uid))->fetchObject();
	  if(!empty($pr)){
	    $ret = TRUE;
	  };

  }else{
	  $pr = db_query("SELECT * FROM {pg_simplepay_payment} WHERE nid = :nid AND uid = :uid", array( ':nid' => $node->nid, ':uid' => $account->uid))->fetchObject();
	  if(!empty($pr)){
	    $ret = TRUE;
	  };
  }
  return $ret;
}
