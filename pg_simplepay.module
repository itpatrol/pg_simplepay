<?php

/**
 * @file
 * Simple pay.
 *
 * Create simple payment peer node.
 */

/**
 * Implements hook_init().
 */
function pg_simplepay_init() {
  drupal_add_css(drupal_get_path('module', 'pg_simplepay') . '/pg_simplepay.css');
}

/**
 * Implements hook_menu().
 */
function pg_simplepay_menu() {
  $items = array();
  $items['admin/pgdata/simplepay'] = array(
    'title' => 'Simple Pay Settings',
    'description' => 'Configure default settings for Simple Pay.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_simplepay_common'),
    'access callback' => 'user_access',
    'access arguments' => array('pg_simplepay administer pgapi'),
    'file' => 'pg_simplepay.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['simplepay/%node'] = array(
    'title' => 'Simple Pay',
    'page callback' => 'pg_simplepay_prepay',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('pg_simplepay buy access'),
    'file' => 'pg_simplepay.admin.inc',
  );

  $items['simplepay/complete/%txnid'] = array(
    'title' => 'Payment completed',
    'page callback' => 'pg_simplepay_complete',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['simplepay/fail/%txnid'] = array(
    'title' => 'Payment failed',
    'page callback' => 'pg_simplepay_fail',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function pg_simplepay_permission() {
  return array(
    'pg_simplepay administer pgapi' => array(
      'title' => t('Simple Pay Settings'),
      'description' => t('Access to settings module page.'),
    ),
    'pg_simplepay free access' => array(
      'title' => t('Free access'),
      'description' => t('Free access to simplepay.'),
    ),
    'pg_simplepay buy access' => array(
      'title' => t('Simple Pay'),
      'description' => t('Access to page simplepay.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function pg_simplepay_theme() {
  return array(
    'pg_simplepay_complete' => array(
      'arguments' => array('t' => array()),
    ),
    'pg_simplepay_fail' => array(
      'arguments' => array('t' => array()),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function pg_simplepay_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && $form['type']['#value'] . '_node_form' == $form_id && variable_get('pg_simplepay_allowed_' . $form['type']['#value'], 0)) {
    $form['pg_simplepay'] = array(
      '#type' => 'fieldset',
      '#title' => t('Simple pay settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => 0,
    );

    $form['pg_simplepay']['pg_simplepay_price'] = array(
      '#type' => 'textfield',
      '#title' => t('Price'),
      '#default_value' => $form['#node']->pg_simplepay_price,
    );
  }

  if ($form_id == 'node_type_form') {
    $form['pg_simplepay'] = array(
      '#type' => 'fieldset',
      '#title' => t('Simple pay settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['pg_simplepay']['pg_simplepay_allowed'] = array(
      '#type' => 'checkbox',
      '#title' => t('Simple pay purchase allowed'),
      '#default_value' => variable_get('pg_simplepay_allowed_' . $form['#node_type']->type, 0),
    );
  }
}

/**
 * Implements hook_node_load().
 */
function pg_simplepay_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $simplepay_price = db_select('pg_simplepay_price', 'p')
      ->fields('p', array('price'))
      ->condition('nid', $node->nid)
      ->condition('vid', $node->vid)
      ->execute()
      ->fetchObject();

    $node->price = $simplepay_price ? $simplepay_price->price : 0;
  }
}

/**
 * Implements hook_node_insert().
 */
function pg_simplepay_node_insert($node) {
  db_insert('pg_simplepay_price')
    ->fields(array(
      'price' => $node->pg_simplepay_price,
      'nid' => $node->nid,
      'vid' => $node->vid,
    ))
    ->execute();
}

/**
 * Implements hook_node_delete().
 */
function pg_simplepay_node_delete($node) {
  db_delete('pg_simplepay_price')
    ->condition('nid', $node->nid)
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_node_update().
 */
function pg_simplepay_node_update($node) {
  $simplepay_price = db_select('pg_simplepay_price', 'p')
    ->fields('p')
    ->condition('nid', $node->nid)
    ->condition('vid', $node->vid)
    ->execute()
    ->fetchObject();

  if ($simplepay_price) {
    db_update('pg_simplepay_price')
      ->fields(array(
        'price' => $node->pg_simplepay_price,
      ))
      ->condition('nid', $node->nid)
      ->condition('vid', $node->vid)
      ->execute();
  }
  else {
    db_insert('pg_simplepay_price')
      ->fields(array(
        'price' => $node->pg_simplepay_price,
        'nid' => $node->nid,
        'vid' => $node->vid,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_view().
 */
function pg_simplepay_node_view($node, $view_mode) {
  if (!user_access('pg_simplepay free access') && variable_get('pg_simplepay_allowed_' . $node->type, 0) && $node->pg_simplepay_price > 0) {
    if ($view_mode == 'teaser') {
      if (!pg_simplepay_is_paid($node->nid)) {
        $node2 = node_build_content($node, TRUE);
        $node->content['body']['#value'] = $node2->teaser;
        
        if (!empty($node->content['files']['#value'])) {
          $node->content['files']['#value'] = t('Please buy access to see attached files.');
        }

        $node->content['pg_simplepay_link'] = array(
          '#markup' => l(t('Buy access'), 'simplepay/' . $object->nid, array('title' => t('Buy access'))),
        );
      }
    }
  }
}

/**
 * Implements hook_pgapi_format_price().
 */
function pg_simplepay_pgapi_format_price() {
  $format['decimals'] = variable_get('pg_simplepay_decimal_places', 2);
  $format['dec_point'] = variable_get('pg_simplepay_decimal', '.');
  $format['thousands_sep'] = variable_get('pg_simplepay_thousands', ',');
  $format['position'] = variable_get('pg_simplepay_position', TRUE);

  return $format;
}

/**
 * Implements hook_pgapi_transaction().
 */
function pg_simplepay_pgapi_transaction($op, &$t) {
  switch ($op) {
    case PG_COMPLETED:
      $simple_access['nid'] = $t->extra['nid'];
      $simple_access['uid'] = $t->uid;
      $simple_access['txnid'] = $t->txnid;
      $simple_access['created'] = time();

      if ($t->uid == 0) {
        $simple_access['session'] = $t->extra['session'];
      }

      drupal_write_record('pg_simplepay_payment', $simple_access);
      $t->workflow = pgapi_get_workflow_id('completed');
      break;

    case PG_DENIED:
      $t->workflow = pgapi_get_workflow_id('security violation');
      break;

    case PG_FAILED:
      $t->workflow = pgapi_get_workflow_id('canceled');
      break;
  }

  return $t;
}

/**
 * Return page url with status payment.
 *
 * @param object $t
 *   Payment object.
 *
 * @return string
 */
function pg_simplepay_pgapi_callback($t) {
  switch ($t->status) {
    case PG_COMPLETED:
      return 'simplepay/complete/' . $t->txnid;

    default:
      return 'simplepay/fail/' . $t->txnid;
  }
}

/**
 * Callback functions.
 */

function pg_simplepay_prepay($node) {
  global $user;

  $t = (object) (NULL);
  $t->amount = $node->pg_simplepay_price;
  $t->type = 'pg_simplepay';
  $t->uid = $user->uid;
  $t->title = t('You have been ordered !title', array(
    '!title' => l($node->title, 'node/' . $node->nid, array('html' => TRUE)),
  ));

  $ses = $_COOKIE[session_name()];

  $t->extra = array(
    'nid' => $node->nid,
    'session' => $ses,
  );

  $t = pgapi_transaction_save($t);
  $payment_url = url('payment/' . $t->txnid, array('absolute' => TRUE));
  drupal_goto($payment_url);

  return '';
}

/**
 * Page after unsuccessful completion of payment.
 *
 * @param object $t
 *   Payment object.
 *
 * @return string
 */
function pg_simplepay_fail($t) {
  global $user;

  if ($user->uid != 1 && $user->uid != $t->uid) {
    drupal_access_denied();
  }

  return theme('pg_simplepay_fail', $t);
}

/**
 * Page after the successful completion of payment.
 *
 * @param object $t
 *   Payment object.
 *
 * @return string
 */
function pg_simplepay_complete($t) {
  global $user;

  if ($user->uid != 1 and $user->uid != $t->uid) {
    drupal_access_denied();
  }

  return theme('pg_simplepay_complete', $t);
}

/**
 * Payment is paid.
 *
 * @param int $nid
 *   Node NID.
 *
 * @param object $account
 *   User object.
 *
 * @return bool
 */
function pg_simplepay_is_paid($nid, $account = NULL) {
  global $user;

  if (!$account) {
    $account = $user;
  }

  $ret = FALSE;
  if ($account->uid == 0) {
    $ses = $_COOKIE[session_name()];
    $pr = db_select('pg_simplepay_payment', 'psp')
      ->fields('psp')
      ->condition('nid', $nid)
      ->condition('session', $ses)
      ->condition('uid', $account->uid)
      ->execute()
      ->fetch();

    if (!empty($pr)) {
      $ret = TRUE;
    }
  }
  else {
    $pr = db_select('pg_simplepay_payment', 'psp')
      ->fields('psp')
      ->condition('nid', $nid)
      ->condition('uid', $account->uid)
      ->execute()
      ->fetch();

    if (!empty($pr)) {
      $ret = TRUE;
    }
  }

  return $ret;
}

/**
 * Implements theme_THEMENAME().
 */
function theme_pg_simplepay_fail($t) {
  $header = array(
    array('data' => $t->title, 'colspan' => '2'),
  );

  $rows = array();

  $rows[] = array(
    t('Price'),
    t('!currency !amount', array(
      '!amount' => $t->amount,
      '!currency' => variable_get('pg_simplepay_symbol', '$'),
    )),
  );

  $rows[] = array(
    t('Status'),
    pgapi_get_status($t->status)
  );

  $rows[] = array(
    t('By method'),
    module_invoke($t->method, 'pgapi_gw', 'display name'),
  );

  $rows[] = array(
    t('Reason'),
    pgapi_get_status($t->description),
  );

  $output = theme('table', $header, $rows);

  return $output;
}

/**
 * Implements theme_THEMENAME().
 */
function theme_pg_simplepay_complete($t) {
  $header = array(
    array('data' => $t->title, 'colspan' => '2'),
  );

  $rows = array();

  $rows[] = array(
    t('Price'),
    t('!currency !amount', array(
      '!amount' => $t->amount,
      '!currency' => variable_get('pg_simplepay_symbol', '$'),
    )),
  );

  $rows[] = array(
    t('Status'),
    pgapi_get_status($t->status),
  );

  $rows[] = array(
    t('By method'),
    module_invoke($t->method, 'pgapi_gw', 'display name'),
  );

  $node = node_load($t->extra['nid']);
  $rows[] = array(
    t('Node URL'),
    l($node->title, 'node/' . $node->nid),
  );

  $output = theme('table', $header, $rows);

  return $output;
}
